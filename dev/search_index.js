var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [StructMapping]","category":"page"},{"location":"functions/#StructMapping.convertdict-Tuple{Type,AbstractDict}","page":"Functions","title":"StructMapping.convertdict","text":"convertdict(T::Type, d::AbstractDict)\n\nConvert the given dictionary to a object of T. T must be decorated with @dictmap (and @with_kw or @with_kw_noshow of Parameters.jl).\n\n\n\n\n\n","category":"method"},{"location":"functions/#StructMapping.@dictmap-Tuple{Any}","page":"Functions","title":"StructMapping.@dictmap","text":"@dictmap(ex)\n\nMacro which allows to use the convertdict function for a struct decorated with @with_kw or @with_kw_noshow of Parameters.jl.\n\n\n\n\n\n","category":"macro"},{"location":"#StructMapping.jl","page":"Home","title":"StructMapping.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows to map a nested Dict to struct.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Parameters, StructMapping\n\njulia> @with_kw struct A\n           a::Float64\n           b::String\n       end\n\njulia> @dictmap @with_kw struct B\n           a::A\n           b::Int64\n       end\n\njulia> j = Dict(\"a\"=>Dict(\"a\"=>1.0, \"b\"=>\"hello\"), \"b\"=>2)\nDict{String,Any} with 2 entries:\n  \"b\" => 2\n  \"a\" => Dict{String,Any}(\"b\"=>\"hello\",\"a\"=>1.0)\n\njulia> b = convertdict(B, j)\nB\n  a: A\n  b: Int64 2\n\njulia> b.a\nA\n  a: Float64 1.0\n  b: String \"hello\"","category":"page"},{"location":"#Working-with-JSON","page":"Home","title":"Working with JSON","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using JSON\n\njulia> s = \"{\\\"b\\\":2,\\\"a\\\":{\\\"b\\\":\\\"hello\\\",\\\"a\\\":1.0}}\"\n\"{\\\"b\\\":2,\\\"a\\\":{\\\"b\\\":\\\"hello\\\",\\\"a\\\":1.0}}\"\n\njulia> println(s)\n{\"b\":2,\"a\":{\"b\":\"hello\",\"a\":1.0}}\n\njulia> j = JSON.parse(s)\nDict{String,Any} with 2 entries:\n  \"b\" => 2\n  \"a\" => Dict{String,Any}(\"b\"=>\"hello\",\"a\"=>1.0)\n\njulia> convertdict(B, j)\nB\n  a: A\n  b: Int64 2","category":"page"},{"location":"#Vector-and-default-values","page":"Home","title":"Vector and default values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> @dictmap @with_kw struct C\n           a::Vector{A}\n           b::Union{A, Nothing} = nothing\n           c::Int64 = 5\n       end\n\njulia> j2 = Dict(\"a\"=>[Dict(\"a\"=>1.0, \"b\"=>\"hello\"), Dict(\"a\"=>2.0, \"b\"=>\"world\")])\nDict{String,Array{Dict{String,Any},1}} with 1 entry:\n  \"a\" => Dict{String,Any}[Dict(\"b\"=>\"hello\",\"a\"=>1.0), Dict(\"b\"=>\"world\",\"a\"=>2.0)]\n\njulia> c = convertdict(C, j2)\nC\n  a: Array{A}((2,))\n  b: Nothing nothing\n  c: Int64 5\n\njulia> c.a\n2-element Array{A,1}:\n A(1.0, \"hello\")\n A(2.0, \"world\")\n\njulia> j3 = Dict(\"a\"=>[Dict(\"a\"=>1.0, \"b\"=>\"hello\")], \"b\"=>Dict(\"b\"=>\"world\",\"a\"=>2.0))\nDict{String,Any} with 2 entries:\n  \"b\" => Dict{String,Any}(\"b\"=>\"world\",\"a\"=>2.0)\n  \"a\" => Dict{String,Any}[Dict(\"b\"=>\"hello\",\"a\"=>1.0)]\n\njulia> c2 = convertdict(C, j3)\nC\n  a: Array{A}((1,))\n  b: A\n  c: Int64 5\n\njulia> c2.a\n1-element Array{A,1}:\n A(1.0, \"hello\")\n\njulia> c2.b\nA\n  a: Float64 2.0\n  b: String \"world\"","category":"page"},{"location":"#Deeply-nested-dictionary","page":"Home","title":"Deeply nested dictionary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> @dictmap @with_kw struct D\n           b::B\n           s::String\n       end\n\njulia> j5 = Dict(\"s\"=>\"hi\", \"b\"=>Dict(\"a\"=>Dict(\"a\"=>1.0, \"b\"=>\"hello\"), \"b\"=>2))\nDict{String,Any} with 2 entries:\n  \"b\" => Dict{String,Any}(\"b\"=>2,\"a\"=>Dict{String,Any}(\"b\"=>\"hello\",\"a\"=>1.0))\n  \"s\" => \"hi\"\n\njulia> d = convertdict(D, j5)\nD\n  b: B\n  s: String \"hi\"\n\njulia> d.b\nB\n  a: A\n  b: Int64 2\n\njulia> d.b.a\nA\n  a: Float64 1.0\n  b: String \"hello\"","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"mauro3/Parameters.jl\nJuliaIO/JSON.jl","category":"page"}]
}
